generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String                      @id @default(cuid())
  username                    String                      @unique
  email                       String                      @unique
  provider                    String?
  password                    String?
  resetPasswordToken          String?
  confirmationToken           String?
  confirmed                   Boolean                     @default(false)
  blocked                     Boolean                     @default(false)
  customRole                  UserRole
  address                     String?
  customImage                 String?
  phone                       String?
  isPlayGame                  Boolean?                    @default(false)
  theme                       String?                     @default("system")
  averageScoreOfCompleted     Float?
  totalAssignments            Int?                        @default(0)
  totalAssignmentsCompleted   Int?                        @default(0)
  averageCompletionPercentage Float?
  createdAt                   DateTime                    @default(now())
  updatedAt                   DateTime                    @updatedAt
  roleId                      String?
  activityLogs                ActivityLog[]
  assignmentsCreated          Assignment[]                @relation("TeacherAssignments")
  progresses                  StudentAssignmentProgress[]
  studentSprites              StudentSprite?
  assignmentsAssigned         UserAssignment[]
  classes                     UserClass[]
  role                        Role?                       @relation(fields: [roleId], references: [id])
  studentStats                StudentStats?
  teacherStats                TeacherStats?
  needsHelpRecords            StudentsNeedingHelp[]
  teacherNotifications        StudentsNeedingHelpTeacher[] @relation("TeacherNotifications")

  @@map("users")
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  type        String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       User[]

  @@map("roles")
}

model Permission {
  id        String           @id @default(cuid())
  action    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  roles     RolePermission[]

  @@map("permissions")
}

model RolePermission {
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model Class {
  id           String            @id @default(cuid())
  name         String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  publishedAt  DateTime?
  activityLogs ActivityLog[]
  assignments  ClassAssignment[]
  statsClasses StatsClass?
  users        UserClass[]
  detailedStats ClassStatsDetailed?
  studentsNeedingHelp StudentsNeedingHelpClass[]

  @@map("classes")
}

model UserClass {
  userId  String
  classId String
  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, classId])
  @@map("user_classes")
}

model Language {
  id          String       @id @default(cuid())
  language    LanguageType
  code        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  publishedAt DateTime?
  assignments Assignment[]

  @@map("languages")
}

model Assignment {
  id                      String                      @id @default(cuid())
  topic                   String?
  color                   String?
  vocabularyItems         Json?
  scheduledPublishAt      DateTime?
  isActive                Boolean?                    @default(true)
  type                    AssignmentType?
  videoUrl                String?
  videoTranscript         String?
  languageAssessmentType  LanguageAssessmentType?
  isIELTS                 Boolean?                    @default(false)
  context                 String?
  totalStudentsInScope    Int?                        @default(0)
  completedStudentsCount  Int?                        @default(0)
  completionRate          Float?
  averageScoreOfCompleted Float?
  createdAt               DateTime                    @default(now())
  updatedAt               DateTime                    @updatedAt
  publishedAt             DateTime?
  teacherId               String?
  languageId              String?
  dueDate                 DateTime?
  activityLogs            ActivityLog[]
  language                Language?                   @relation(fields: [languageId], references: [id])
  teacher                 User?                       @relation("TeacherAssignments", fields: [teacherId], references: [id])
  classes                 ClassAssignment[]
  evaluationSettings      EvaluationSettings?
  questions               Question[]
  progresses              StudentAssignmentProgress[]
  students                UserAssignment[]
  stats                   AssignmentStats?

  @@map("assignments")
}

model ClassAssignment {
  classId      String
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  class        Class      @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@id([classId, assignmentId])
  @@map("class_assignments")
}

model UserAssignment {
  userId       String
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, assignmentId])
  @@map("user_assignments")
}

model EvaluationSettings {
  id                  String         @id @default(cuid())
  type                EvaluationType
  customPrompt        String?
  rules               Json?
  acceptableResponses Json?
  feedbackSettings    Json           @default("{}")
  assignmentId        String         @unique
  assignment          Assignment     @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@map("evaluation_settings")
}

model Question {
  id           String                      @id @default(cuid())
  image        String?
  textQuestion String?
  videoUrl     String?
  textAnswer   String?
  createdAt    DateTime                    @default(now())
  updatedAt    DateTime                    @updatedAt
  publishedAt  DateTime?
  assignmentId String
  assignment   Assignment                  @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  progresses   StudentAssignmentProgress[]

  @@map("questions")
}

model StudentAssignmentProgress {
  id                         String     @id @default(cuid())
  isComplete                 Boolean    @default(false)
  isCorrect                  Boolean    @default(false)
  languageConfidenceResponse Json?
  grammarCorrected           Json?
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime   @updatedAt
  publishedAt                DateTime?
  studentId                  String
  assignmentId               String
  questionId                 String?
  assignment                 Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  question                   Question?  @relation(fields: [questionId], references: [id])
  student                    User       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_assignment_progress")
}

model ActivityLog {
  id           String          @id @default(cuid())
  type         ActivityLogType
  action       String?
  details      Json?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  publishedAt  DateTime?
  userId       String?
  classId      String?
  assignmentId String?
  assignment   Assignment?     @relation(fields: [assignmentId], references: [id])
  class        Class?          @relation(fields: [classId], references: [id])
  user         User?           @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

model AssignmentCategory {
  id                      String                  @id @default(cuid())
  name                    String
  type                    AssignmentCategoryType?
  description             String?
  defaultPrompt           String?
  defaultRules            Json?
  defaultFeedbackSettings Json?
  isEnabled               Boolean                 @default(true)
  isIELTS                 Boolean?                @default(false)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  publishedAt             DateTime?
  assignmentGroupId       String?
  assignmentGroup         AssignmentGroup?        @relation(fields: [assignmentGroupId], references: [id])

  @@map("assignment_categories")
}

model AssignmentGroup {
  id                   String               @id @default(cuid())
  name                 String
  description          String
  color                String
  isEnabled            Boolean              @default(true)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  publishedAt          DateTime?
  assignmentCategories AssignmentCategory[]

  @@map("assignment_groups")
}

model Tool {
  id          String    @id @default(cuid())
  type        ToolType
  name        String?
  description String?
  enabled     Boolean   @default(true)
  imageId     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  @@map("tools")
}

model SpriteSet {
  id             String          @id @default(cuid())
  name           String
  description    String?
  difficulty     Int?
  order          Int
  stages         Json            @default("[]")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  publishedAt    DateTime?
  studentSprites StudentSprite[]

  @@map("sprite_sets")
}

model StudentSprite {
  id                        String     @id @default(cuid())
  currentEvolutionStage     Int        @default(0)
  completedAssignmentsCount Int        @default(0)
  currentSpriteSetIndex     Int        @default(0)
  completedSpriteSets       Json       @default("[]")
  createdAt                 DateTime   @default(now())
  updatedAt                 DateTime   @updatedAt
  publishedAt               DateTime?
  studentId                 String     @unique
  spriteSetId               String?
  spriteSet                 SpriteSet? @relation(fields: [spriteSetId], references: [id])
  student                   User       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_sprites")
}

model StatsClass {
  id                String    @id @default(cuid())
  averageCompletion Float?
  averageScore      Float?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  publishedAt       DateTime?
  classId           String    @unique
  class             Class     @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@map("stats_classes")
}

// Pre-aggregated assignment statistics for scalable performance
model AssignmentStats {
  id                      String     @id @default(cuid())
  assignmentId            String     @unique
  totalStudents           Int        @default(0)
  completedStudents       Int        @default(0)
  inProgressStudents      Int        @default(0)
  notStartedStudents      Int        @default(0)
  completionRate          Float      @default(0.0)
  averageScore            Float      @default(0.0)
  totalQuestions          Int        @default(0)
  totalAnswers            Int        @default(0)
  totalCorrectAnswers     Int        @default(0)
  accuracyRate            Float      @default(0.0)
  lastUpdated             DateTime   @default(now())
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  assignment              Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@map("assignment_stats")
}

// Pre-aggregated student statistics for individual performance tracking
model StudentStats {
  id                      String   @id @default(cuid())
  studentId               String   @unique
  totalAssignments        Int      @default(0)
  completedAssignments    Int      @default(0)
  inProgressAssignments   Int      @default(0)
  notStartedAssignments   Int      @default(0)
  averageScore            Float    @default(0.0)
  totalQuestions          Int      @default(0)
  totalAnswers            Int      @default(0)
  totalCorrectAnswers     Int      @default(0)
  accuracyRate            Float    @default(0.0)
  completionRate          Float    @default(0.0)
  lastActivityDate        DateTime?
  lastUpdated             DateTime @default(now())
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  student                 User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_stats")
}

// Pre-aggregated teacher statistics for teacher performance tracking
model TeacherStats {
  id                      String   @id @default(cuid())
  teacherId               String   @unique
  totalAssignments        Int      @default(0)
  totalClasses            Int      @default(0)
  totalStudents           Int      @default(0)
  averageClassCompletion  Float    @default(0.0)
  averageClassScore       Float    @default(0.0)
  totalQuestions          Int      @default(0)
  activeAssignments       Int      @default(0)
  scheduledAssignments    Int      @default(0)
  lastUpdated             DateTime @default(now())
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  teacher                 User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@map("teacher_stats")
}

// Enhanced class statistics with more detailed metrics
model ClassStatsDetailed {
  id                      String   @id @default(cuid())
  classId                 String   @unique
  totalStudents           Int      @default(0)
  totalAssignments        Int      @default(0)
  averageCompletion       Float    @default(0.0)
  averageScore            Float    @default(0.0)
  totalQuestions          Int      @default(0)
  totalAnswers            Int      @default(0)
  totalCorrectAnswers     Int      @default(0)
  accuracyRate            Float    @default(0.0)
  activeStudents          Int      @default(0)
  studentsNeedingHelp     Int      @default(0)
  lastActivityDate        DateTime?
  lastUpdated             DateTime @default(now())
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  class                   Class    @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@map("class_stats_detailed")
}

// School-wide daily statistics for dashboard and analytics
model SchoolStats {
  id                      String   @id @default(cuid())
  date                    DateTime @unique
  totalUsers              Int      @default(0)
  totalTeachers           Int      @default(0)
  totalStudents           Int      @default(0)
  totalClasses            Int      @default(0)
  totalAssignments        Int      @default(0)
  activeAssignments       Int      @default(0)
  scheduledAssignments    Int      @default(0)
  completedAssignments    Int      @default(0)
  averageCompletionRate   Float    @default(0.0)
  averageScore            Float    @default(0.0)
  totalQuestions          Int      @default(0)
  totalAnswers            Int      @default(0)
  totalCorrectAnswers     Int      @default(0)
  dailyActiveStudents     Int      @default(0)
  dailyActiveTeachers     Int      @default(0)
  studentsNeedingHelp     Int      @default(0)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("school_stats")
}

// Performance metrics for specific time periods (hourly, daily, weekly)
model PerformanceMetric {
  id              String              @id @default(cuid())
  metricType      PerformanceMetricType
  entityType      EntityType
  entityId        String
  timeFrame       TimeFrame
  date            DateTime
  hour            Int?                // For hourly metrics
  value           Float
  additionalData  Json?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@index([entityType, entityId, timeFrame, date])
  @@map("performance_metrics")
}

model DashboardSnapshot {
  id                       String                @id @default(cuid())
  timestamp                DateTime
  snapshotType             DashboardSnapshotType
  totalClasses             Int?
  totalTeachers            Int?
  totalStudents            Int?
  totalAssignments         Int?
  classAssignments         Int?
  individualAssignments    Int?
  averageCompletionRate    Int?
  averageSuccessRate       Int?
  studentsNeedingAttention Int?
  recentActivities         Int?
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  publishedAt              DateTime?

  @@map("dashboard_snapshots")
}

model UploadFile {
  id               String        @id @default(cuid())
  name             String
  alternativeText  String?
  caption          String?
  width            Int?
  height           Int?
  formats          Json?
  hash             String
  ext              String?
  mime             String
  size             Float
  url              String
  previewUrl       String?
  provider         String
  providerMetadata Json?
  folderPath       String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  folderId         String?
  folder           UploadFolder? @relation(fields: [folderId], references: [id])

  @@map("upload_files")
}

model UploadFolder {
  id        String         @id @default(cuid())
  name      String
  pathId    Int
  path      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  parentId  String?
  files     UploadFile[]
  parent    UploadFolder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children  UploadFolder[] @relation("FolderHierarchy")

  @@map("upload_folders")
}

enum UserRole {
  TEACHER
  ADMIN
  STUDENT
  PARENT
}

enum LanguageType {
  ENGLISH
  VIETNAMESE
  JAPANESE
  SPANISH
  ITALIAN
  FRENCH
  GERMAN
  PORTUGESE
}

enum AssignmentType {
  CLASS
  INDIVIDUAL
}

enum LanguageAssessmentType {
  SCRIPTED_US
  SCRIPTED_UK
  UNSCRIPTED_US
  UNSCRIPTED_UK
  PRONUNCIATION_US
  PRONUNCIATION_UK
}

enum EvaluationType {
  CUSTOM
  IMAGE
  VIDEO
  Q_AND_A
  READING
  PRONUNCIATION
}

enum ActivityLogType {
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  USER_BLOCKED
  USER_UNBLOCKED
  USER_CONFIRMED
  USER_PASSWORD_CHANGED
  USER_ROLE_CHANGED
  CLASS_CREATED
  CLASS_UPDATED
  CLASS_DELETED
  CLASS_USERS_ADDED
  CLASS_USERS_REMOVED
  ASSIGNMENT_CREATED
  ASSIGNMENT_UPDATED
  ASSIGNMENT_DELETED
  ASSIGNMENT_PUBLISHED
  ASSIGNMENT_ARCHIVED
  INDIVIDUAL_ASSIGNMENT_CREATED
  INDIVIDUAL_ASSIGNMENT_DELETED
  USER_LOGIN
  USER_LOGOUT
  USER_LOGIN_FAILED
  SYSTEM_BACKUP_CREATED
  SYSTEM_MAINTENANCE
  STUDENT_CREATED
  TEACHER_CREATED
}

enum AssignmentCategoryType {
  IMAGE
  VIDEO
  Q_AND_A
  CUSTOM
  READING
  PRONUNCIATION
  Q_AND_A_IMAGE
}

enum ToolType {
  PLANNING
  ASSESSMENT
  RESOURCES
  ADMIN
  PUPIL_REPORTS
  LEADERSHIP
  WELLBEING
}

enum DashboardSnapshotType {
  daily
  weekly
  monthly
}

enum PerformanceMetricType {
  COMPLETION_RATE
  ACCURACY_RATE
  AVERAGE_SCORE
  ACTIVE_USERS
  QUESTIONS_ANSWERED
  TIME_SPENT
  LOGIN_COUNT
  ASSIGNMENT_SUBMISSIONS
}

enum EntityType {
  SCHOOL
  CLASS
  TEACHER
  STUDENT
  ASSIGNMENT
  QUESTION
}

enum TimeFrame {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
}

// Students requiring assistance tracking
model StudentsNeedingHelp {
  id                  String   @id @default(cuid())
  studentId           String
  reasons             Json     // Array of reasons why student needs help
  needsHelpSince      DateTime // When they first needed help
  lastUpdated         DateTime @default(now()) @updatedAt
  isResolved          Boolean  @default(false)
  resolvedAt          DateTime?
  overdueAssignments  Int      @default(0)
  averageScore        Float    @default(0.0)
  completionRate      Float    @default(0.0)
  daysNeedingHelp     Int      @default(0)
  severity            String   @default("MODERATE") // CRITICAL, HIGH, MODERATE, LOW
  teacherNotes        String?
  actionsTaken        Json?    // Array of actions taken to help student
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  student             User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  classes             StudentsNeedingHelpClass[]
  teachers            StudentsNeedingHelpTeacher[]
  
  @@unique([studentId, isResolved])
  @@map("students_needing_help")
}

// Junction table for StudentsNeedingHelp and Classes
model StudentsNeedingHelpClass {
  studentNeedingHelpId String
  classId              String
  studentNeedingHelp   StudentsNeedingHelp @relation(fields: [studentNeedingHelpId], references: [id], onDelete: Cascade)
  class                Class               @relation(fields: [classId], references: [id], onDelete: Cascade)
  
  @@id([studentNeedingHelpId, classId])
  @@map("students_needing_help_classes")
}

// Junction table for StudentsNeedingHelp and Teachers
model StudentsNeedingHelpTeacher {
  studentNeedingHelpId String
  teacherId            String
  studentNeedingHelp   StudentsNeedingHelp @relation(fields: [studentNeedingHelpId], references: [id], onDelete: Cascade)
  teacher              User                @relation("TeacherNotifications", fields: [teacherId], references: [id], onDelete: Cascade)
  
  @@id([studentNeedingHelpId, teacherId])
  @@map("students_needing_help_teachers")
}
